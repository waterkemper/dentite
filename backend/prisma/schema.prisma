generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Practice {
  id                String   @id @default(uuid())
  name              String
  email             String   @unique
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  subscriptionTier  String   @default("basic") // basic, premium
  subscriptionStatus String  @default("active") // active, inactive, trial
  
  // Stripe Billing
  stripeCustomerId        String?   @unique
  stripeSubscriptionId    String?   @unique
  stripePriceId           String?   // Current plan price ID
  stripePaymentMethodId   String?
  subscriptionPeriodStart DateTime?
  subscriptionPeriodEnd   DateTime?
  trialEndsAt             DateTime?
  billingCycle            String?   @default("monthly") // monthly, yearly
  
  // Usage tracking
  userSeatsIncluded       Int       @default(3)
  userSeatsUsed           Int       @default(0)
  messagesIncluded        Int       @default(1000)
  messagesSentThisMonth   Int       @default(0)
  usageBillingCycleStart  DateTime?
  
  // Onboarding
  onboardingCompleted     Boolean   @default(false)
  onboardingStep          Int?
  onboardingCompletedAt   DateTime?
  
  // Deprecated OpenDental-specific fields (kept for compatibility)
  openDentalApiKey  String?
  openDentalUrl     String?
  // Multi-PMS support
  pmsType           String?  // opendental, ortho2edge
  pmsApiKey         String?
  pmsUrl            String?
  pmsConfig         Json?
  
  // Email Configuration (Multi-tenant messaging)
  emailProvider           String?   @default("system") // system, custom_sendgrid
  sendgridApiKey          String?   // Encrypted
  sendgridFromEmail       String?
  sendgridFromName        String?
  sendgridDomainId        String?
  emailDomainVerified     Boolean   @default(false)
  emailVerificationStatus String?   // pending, verified, failed
  emailDnsRecords         Json?     // DNS records for verification
  emailFallbackEnabled    Boolean   @default(true)
  
  // SMS Configuration (Multi-tenant messaging)
  smsProvider             String?   @default("system") // system, custom_twilio
  twilioAccountSid        String?   // Encrypted
  twilioAuthToken         String?   // Encrypted
  twilioPhoneNumber       String?
  smsVerificationStatus   String?   // pending, verified, failed
  smsFallbackEnabled      Boolean   @default(true)
  
  // Last tested/validated
  emailLastTestedAt       DateTime?
  smsLastTestedAt         DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  users             User[]
  patients          Patient[]
  insurancePlans    InsurancePlan[]
  campaigns         OutreachCampaign[]
  subscriptions     Subscription[]

  @@map("practices")
}

model User {
  id                    String   @id @default(uuid())
  practiceId            String
  email                 String   @unique
  password              String
  firstName             String
  lastName              String
  role                  String   @default("staff") // admin, staff
  isActive              Boolean  @default(true)
  passwordResetToken    String?  @unique
  passwordResetExpires  DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  practice      Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Patient {
  id                  String   @id @default(uuid())
  practiceId          String
  openDentalId        String?  // External ID from OpenDental
  createdSource       String   @default("api") // api, manual
  firstName           String
  lastName            String
  email               String?
  phone               String?
  dateOfBirth         DateTime?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  lastVisitDate       DateTime?
  nextAppointmentDate DateTime?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  practice            Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  insurance           PatientInsurance[]
  benefitsSnapshots   BenefitsSnapshot[]
  outreachLogs        OutreachLog[]
  appointments        Appointment[]
  preferences         PatientPreferences?
  sequenceStates      PatientSequenceState[]

  @@unique([practiceId, openDentalId])
  @@map("patients")
}

model InsurancePlan {
  id              String   @id @default(uuid())
  practiceId      String
  carrierName     String
  planName        String?
  groupNumber     String?
  phone           String?
  annualMaximum   Decimal  @default(1500.00) @db.Decimal(10, 2)
  deductible      Decimal  @default(50.00) @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  practice        Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  patientInsurance PatientInsurance[]

  @@map("insurance_plans")
}

model PatientInsurance {
  id                    String   @id @default(uuid())
  patientId             String
  insurancePlanId       String
  policyNumber          String?
  subscriberName        String?
  subscriberRelation    String?  // self, spouse, child, other
  effectiveDate         DateTime?
  expirationDate        DateTime // Benefits expiration (typically Dec 31)
  annualMaximum         Decimal  @db.Decimal(10, 2)
  deductible            Decimal  @db.Decimal(10, 2)
  deductibleMet         Decimal  @default(0.00) @db.Decimal(10, 2)
  usedBenefits          Decimal  @default(0.00) @db.Decimal(10, 2)
  remainingBenefits     Decimal  @db.Decimal(10, 2) // Calculated field
  isPrimary             Boolean  @default(true)
  isActive              Boolean  @default(true)
  lastSyncedAt          DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  patient               Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  insurancePlan         InsurancePlan @relation(fields: [insurancePlanId], references: [id])

  @@map("patient_insurance")
}

model BenefitsSnapshot {
  id                String   @id @default(uuid())
  patientId         String
  snapshotDate      DateTime @default(now())
  annualMaximum     Decimal  @db.Decimal(10, 2)
  deductible        Decimal  @db.Decimal(10, 2)
  deductibleMet     Decimal  @db.Decimal(10, 2)
  usedBenefits      Decimal  @db.Decimal(10, 2)
  remainingBenefits Decimal  @db.Decimal(10, 2)
  daysUntilExpiry   Int
  createdAt         DateTime @default(now())

  patient           Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("benefits_snapshots")
}

model OutreachCampaign {
  id                    String   @id @default(uuid())
  practiceId            String
  name                  String
  description           String?
  triggerType           String   // expiring_60, expiring_30, expiring_14
  messageType           String   // sms, email, both
  messageTemplate       String   @db.Text
  isActive              Boolean  @default(true)
  minBenefitAmount      Decimal  @default(200.00) @db.Decimal(10, 2)
  // Sequence support
  isSequence            Boolean  @default(false)
  autoStopOnAppointment Boolean  @default(true)
  autoStopOnResponse    Boolean  @default(true)
  autoStopOnOptOut      Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  practice        Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  outreachLogs    OutreachLog[]
  steps           CampaignStep[]
  sequenceStates  PatientSequenceState[]

  @@map("outreach_campaigns")
}

model OutreachLog {
  id              String   @id @default(uuid())
  campaignId      String
  patientId       String
  stepId          String?  // For sequence campaigns
  stepNumber      Int?     // For sequence campaigns
  messageType     String   // sms, email
  messageContent  String   @db.Text
  recipientEmail  String?
  recipientPhone  String?
  status          String   @default("pending") // pending, sent, delivered, failed, responded
  sentAt          DateTime?
  deliveredAt     DateTime?
  respondedAt     DateTime?
  openedAt        DateTime? // Email open timestamp
  clickedAt       DateTime? // Link click timestamp
  bouncedAt       DateTime? // Bounce timestamp
  unsubscribedAt  DateTime? // Unsubscribe timestamp
  bounceType      String?   // hard, soft, spam
  clickCount      Int      @default(0) // Number of link clicks
  openCount       Int      @default(0) // Number of opens
  webhookEvents   Json?    // Raw webhook event log
  messagingProvider String? // system, custom_sendgrid, custom_twilio
  errorMessage    String?
  externalId      String?  // Twilio/SendGrid message ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  campaign        OutreachCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  step            CampaignStep? @relation(fields: [stepId], references: [id], onDelete: SetNull)
  messageEvents   MessageEvent[]

  @@map("outreach_logs")
}

model MessageEvent {
  id              String   @id @default(uuid())
  outreachLogId   String
  eventType       String   // delivered, open, click, bounce, dropped, spamreport, unsubscribe (SendGrid) OR queued, sent, delivered, failed, undelivered (Twilio)
  eventData       Json     // Full webhook payload
  provider        String   // sendgrid, twilio
  timestamp       DateTime @default(now())
  processed       Boolean  @default(false)
  createdAt       DateTime @default(now())

  outreachLog     OutreachLog @relation(fields: [outreachLogId], references: [id], onDelete: Cascade)

  @@index([outreachLogId])
  @@index([eventType])
  @@map("message_events")
}

model PatientPreferences {
  id              String   @id @default(uuid())
  patientId       String   @unique
  emailOptOut     Boolean  @default(false)
  smsOptOut       Boolean  @default(false)
  unsubscribeReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("patient_preferences")
}

model Appointment {
  id                String   @id @default(uuid())
  patientId         String
  openDentalId      String?
  appointmentDate   DateTime
  appointmentType   String?  // cleaning, exam, filling, crown, etc.
  duration          Int?     // minutes
  status            String   @default("scheduled") // scheduled, completed, cancelled, no-show
  notes             String?  @db.Text
  estimatedCost     Decimal? @db.Decimal(10, 2)
  actualCost        Decimal? @db.Decimal(10, 2)
  wasBookedFromOutreach Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  patient           Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

// Orthodontic features
model PaymentPlan {
  id                String   @id @default(uuid())
  patientId         String
  totalAmount       Decimal  @db.Decimal(10, 2)
  downPayment       Decimal  @db.Decimal(10, 2)
  monthlyPayment    Decimal  @db.Decimal(10, 2)
  startDate         DateTime
  numberOfPayments  Int
  remainingPayments Int
  status            String
  pmsId             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PaymentTransaction {
  id             String   @id @default(uuid())
  paymentPlanId  String
  amount         Decimal  @db.Decimal(10, 2)
  paymentDate    DateTime
  paymentMethod  String
  status         String
  pmsId          String?
  createdAt      DateTime @default(now())
}

model TreatmentPhase {
  id               String   @id @default(uuid())
  patientId        String
  phaseName        String
  phaseNumber      Int
  startDate        DateTime
  expectedEndDate  DateTime
  actualEndDate    DateTime?
  status           String
  estimatedCost    Decimal? @db.Decimal(10, 2)
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Campaign Sequence Models
model CampaignStep {
  id              String   @id @default(uuid())
  campaignId      String
  stepNumber      Int      // Order in sequence (1, 2, 3...)
  name            String   // "Initial Reminder", "Follow-up", "Final Urgent"
  messageType     String   // sms, email
  messageTemplate String   @db.Text
  delayType       String   // fixed_days, days_before_expiry
  delayValue      Int      // Number of days
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  campaign        OutreachCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  outreachLogs    OutreachLog[]
  
  @@unique([campaignId, stepNumber])
  @@map("campaign_steps")
}

model PatientSequenceState {
  id                  String   @id @default(uuid())
  campaignId          String
  patientId           String
  currentStepNumber   Int      @default(0)
  status              String   @default("active") // active, completed, paused, stopped
  stopReason          String?  // appointment_booked, patient_responded, opted_out, expiry_passed
  nextScheduledAt     DateTime?
  startedAt           DateTime @default(now())
  completedAt         DateTime?
  stoppedAt           DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  campaign            OutreachCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  patient             Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, patientId])
  @@index([nextScheduledAt])
  @@index([status])
  @@map("patient_sequence_states")
}

model PricingPlan {
  id                String   @id @default(uuid())
  name              String   @unique
  displayName       String
  description       String?
  price             Decimal  @db.Decimal(10, 2)
  currency          String   @default("usd")
  billingInterval   String   @default("month") // month, year
  stripePriceId     String?  @unique
  isActive          Boolean  @default(true)
  
  // Plan features
  messagesIncluded  Int
  userSeatsIncluded Int
  
  // Feature flags
  hasBasicAnalytics     Boolean @default(true)
  hasAdvancedAnalytics  Boolean @default(false)
  hasCampaignSequences  Boolean @default(false)
  hasCustomIntegrations Boolean @default(false)
  hasPhoneSupport       Boolean @default(false)
  hasDedicatedManager   Boolean @default(false)
  
  // Display order
  sortOrder         Int      @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  subscriptions     Subscription[]

  @@map("pricing_plans")
}

model Subscription {
  id                   String   @id @default(uuid())
  practiceId           String
  pricingPlanId        String?
  stripeSubscriptionId String   @unique
  status               String   // active, canceled, past_due, trialing
  planName             String
  amount               Decimal  @db.Decimal(10, 2)
  currency             String   @default("usd")
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  practice             Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  pricingPlan          PricingPlan? @relation(fields: [pricingPlanId], references: [id])

  @@map("subscriptions")
}

